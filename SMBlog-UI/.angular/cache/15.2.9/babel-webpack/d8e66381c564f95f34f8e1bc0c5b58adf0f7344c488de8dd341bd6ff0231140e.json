{"ast":null,"code":"var _class;\nimport { Validators } from '@angular/forms';\nimport { ApplicationUserLogin } from 'src/app/models/account/application-user-login.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/account.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class LoginComponent {\n  constructor(accountService, router, formBuilder) {\n    this.accountService = accountService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    if (this.accountService.isLoggedIn) {\n      this.router.navigate(['/dashboard']);\n    }\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      username: [null, [Validators.required, Validators.minLength(5), Validators.maxLength(20)]],\n      password: [null, [Validators.required, Validators.minLength(10), Validators.maxLength(50)]]\n    });\n  }\n  isTouched(field) {\n    return this.loginForm.get(field).touched;\n  }\n  hasErrors(field) {\n    return this.loginForm.get(field).errors;\n  }\n  hasError(field, error) {\n    return !!this.loginForm.get(field).hasError(error);\n  }\n  onSubmit() {\n    let applicationUserLogin = new ApplicationUserLogin(this.loginForm.get(\"username\").value, this.loginForm.get(\"password\").value);\n    this.accountService.login(applicationUserLogin).subscribe(() => {\n      this.router.navigate(['/dashboard']);\n    });\n  }\n}\n_class = LoginComponent;\n_class.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-login\"]],\n  decls: 2,\n  vars: 0,\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"login works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAEnE,SAASC,oBAAoB,QAAQ,qDAAqD;;;;;AAQ1F,OAAM,MAAOC,cAAc;EAIzBC,YACUC,cAA8B,EAC9BC,MAAc,EACdC,WAAwB;IAFxB,mBAAc,GAAdF,cAAc;IACd,WAAM,GAANC,MAAM;IACN,gBAAW,GAAXC,WAAW;IAEnB,IAAG,IAAI,CAACF,cAAc,CAACG,UAAU,EAAC;MAChC,IAAI,CAACF,MAAM,CAACG,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;EAExC;EAEAC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,IAAI,EAAE,CACfZ,UAAU,CAACa,QAAQ,EACnBb,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,EACvBd,UAAU,CAACe,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC;MACFC,QAAQ,EAAE,CAAC,IAAI,EAAE,CACfhB,UAAU,CAACa,QAAQ,EACnBb,UAAU,CAACc,SAAS,CAAC,EAAE,CAAC,EACxBd,UAAU,CAACe,SAAS,CAAC,EAAE,CAAC,CACzB;KACF,CAAC;EACJ;EAEAE,SAAS,CAACC,KAAa;IACrB,OAAO,IAAI,CAACR,SAAS,CAACS,GAAG,CAACD,KAAK,CAAC,CAACE,OAAO;EAC1C;EAEAC,SAAS,CAACH,KAAa;IACrB,OAAO,IAAI,CAACR,SAAS,CAACS,GAAG,CAACD,KAAK,CAAC,CAACI,MAAM;EACzC;EAEAC,QAAQ,CAACL,KAAa,EAAEM,KAAa;IACnC,OAAO,CAAC,CAAC,IAAI,CAACd,SAAS,CAACS,GAAG,CAACD,KAAK,CAAC,CAACK,QAAQ,CAACC,KAAK,CAAC;EACpD;EAEAC,QAAQ;IACN,IAAIC,oBAAoB,GAAyB,IAAIzB,oBAAoB,CACvE,IAAI,CAACS,SAAS,CAACS,GAAG,CAAC,UAAU,CAAC,CAACQ,KAAK,EACpC,IAAI,CAACjB,SAAS,CAACS,GAAG,CAAC,UAAU,CAAC,CAACQ,KAAK,CACrC;IAED,IAAI,CAACvB,cAAc,CAACwB,KAAK,CAACF,oBAAoB,CAAC,CAACG,SAAS,CAAC,MAAK;MAC7D,IAAI,CAACxB,MAAM,CAACG,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;IACtC,CAAC,CAAC;EACJ;;SAlDWN,cAAc;;mBAAdA,MAAc;AAAA;;QAAdA,MAAc;EAAA4B;EAAAC;EAAAC;EAAAC;IAAA;MCX3BC,yBAAG;MAAAA,4BAAY;MAAAA,iBAAI","names":["Validators","ApplicationUserLogin","LoginComponent","constructor","accountService","router","formBuilder","isLoggedIn","navigate","ngOnInit","loginForm","group","username","required","minLength","maxLength","password","isTouched","field","get","touched","hasErrors","errors","hasError","error","onSubmit","applicationUserLogin","value","login","subscribe","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Sameer\\source\\repos\\SMBlog\\SMBlog-UI\\src\\app\\components\\login\\login.component.ts","C:\\Users\\Sameer\\source\\repos\\SMBlog\\SMBlog-UI\\src\\app\\components\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ApplicationUserLogin } from 'src/app/models/account/application-user-login.model';\nimport { AccountService } from 'src/app/services/account.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  \n  constructor(\n    private accountService: AccountService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) { \n    if(this.accountService.isLoggedIn){\n      this.router.navigate(['/dashboard']);\n    }\n  }\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      username: [null, [\n        Validators.required,\n        Validators.minLength(5),\n        Validators.maxLength(20)\n      ]],\n      password: [null, [\n        Validators.required,\n        Validators.minLength(10),\n        Validators.maxLength(50)\n      ]]\n    });\n  }\n\n  isTouched(field: string){\n    return this.loginForm.get(field).touched;\n  }\n\n  hasErrors(field: string) {\n    return this.loginForm.get(field).errors;\n  }\n\n  hasError(field: string, error: string) {\n    return !!this.loginForm.get(field).hasError(error);\n  }\n\n  onSubmit() {\n    let applicationUserLogin: ApplicationUserLogin = new ApplicationUserLogin(\n      this.loginForm.get(\"username\").value,\n      this.loginForm.get(\"password\").value\n    );\n\n    this.accountService.login(applicationUserLogin).subscribe(() => {\n      this.router.navigate(['/dashboard']);\n    });\n  }\n\n}\n","<p>login works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}