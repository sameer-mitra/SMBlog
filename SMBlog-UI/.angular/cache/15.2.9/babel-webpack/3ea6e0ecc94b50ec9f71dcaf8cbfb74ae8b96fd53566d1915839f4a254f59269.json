{"ast":null,"code":"var _class;\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"../services/account.service\";\nexport class ErrorInterceptor {\n  constructor(toastr, accountService) {\n    this.toastr = toastr;\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      if (error) {\n        switch (error.status) {\n          case 400:\n            this.handle400Error(error);\n            break;\n          case 401:\n            this.handle401Error(error);\n            break;\n          case 500:\n            this.handle500Error(error);\n            break;\n          default:\n            this.handleUnexpectedError(error);\n            break;\n        }\n      }\n      return throwError(() => error);\n    }));\n  }\n  handle400Error(error) {\n    if (!!error.error && Array.isArray(error.error)) {\n      let errorMessage = '';\n      for (const key in error.error) {\n        if (!!error.error[key]) {\n          const errorElement = error.error[key];\n          errorMessage = `${errorMessage}${errorElement.code} - ${errorElement.description}\\n`;\n        }\n      }\n      this.toastr.error(error, error.statusText);\n      console.log(error.error);\n    } else if (!!error?.error.errors?.Content && typeof error.error.errors.Content === 'object') {\n      let errorObject = error.error.errors.Content;\n      let errorMessage = '';\n      for (const key in errorObject) {\n        const errorElement = errorObject[key];\n        errorMessage = `${errorMessage}${errorElement}\\n`;\n      }\n      this.toastr.error(errorMessage, error.statusCode);\n      console.log(error.error);\n    } else if (!!error.error) {\n      let errorMessage = typeof error.error == 'string' ? error.error : 'There is a validation error.';\n      this.toastr.error(errorMessage, error.statusCode);\n      console.log(error.error);\n    } else {\n      this.toastr.error(error.statusText, error.status);\n      console.log(error);\n    }\n  }\n  handle401Error(error) {\n    let errorMessage = 'Please login to your account.';\n    this.accountService.logout();\n    this.toastr.error(errorMessage, error.statusText);\n    //route to login page.\n  }\n\n  handle500Error(error) {\n    this.toastr.error('Please contact the administrator. An error happened in the server.');\n    console.log(error);\n  }\n  handleUnexpectedError(error) {\n    this.toastr.error('Something unexpected happened.');\n    console.log(error);\n  }\n}\n_class = ErrorInterceptor;\n_class.ɵfac = function ErrorInterceptor_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.ToastrService), i0.ɵɵinject(i2.AccountService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"mappings":"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","names":["throwError","catchError","ErrorInterceptor","constructor","toastr","accountService","intercept","request","next","handle","pipe","error","status","handle400Error","handle401Error","handle500Error","handleUnexpectedError","Array","isArray","errorMessage","key","errorElement","code","description","statusText","console","log","errors","Content","errorObject","statusCode","logout","factory"],"sourceRoot":"","sources":["C:\\Users\\Sameer\\source\\repos\\SMBlog\\SMBlog-UI\\src\\app\\interceptors\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { ToastrService } from 'ngx-toastr';\nimport { AccountService } from '../services/account.service';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n  constructor(\n    private toastr: ToastrService,\n    private accountService: AccountService\n  ) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      catchError( error => {\n        if(error){\n          switch(error.status){\n            case 400:\n              this.handle400Error(error);\n              break;\n            case 401:\n              this.handle401Error(error);\n              break;\n            case 500:\n              this.handle500Error(error);\n              break;\n            default:\n              this.handleUnexpectedError(error);\n              break;\n          }\n        }\n        return throwError(() => error);\n      })\n    );\n  }\n\n  handle400Error(error: any){\n    if(!!error.error && Array.isArray(error.error)){\n      let errorMessage = '';\n      for (const key in error.error){\n        if(!!error.error[key]){\n          const errorElement = error.error[key];\n          errorMessage = (`${errorMessage}${errorElement.code} - ${errorElement.description}\\n`);\n        }\n      }\n      this.toastr.error(error, error.statusText);\n      console.log(error.error);\n    } \n    else if (!!error ?.error.errors?.Content && (typeof error.error.errors.Content) === 'object'){\n      let errorObject = error.error.errors.Content;\n      let errorMessage = '';\n      for (const key in errorObject){\n        const errorElement = errorObject[key];\n        errorMessage = (`${errorMessage}${errorElement}\\n`);        \n      }\n      this.toastr.error(errorMessage, error.statusCode);\n      console.log(error.error);\n    } \n    else if (!!error.error){\n      let errorMessage = ((typeof error.error) == 'string')\n      ? error.error\n      : 'There is a validation error.';\n      this.toastr.error(errorMessage, error.statusCode);\n      console.log(error.error);\n    }\n    else{\n      this.toastr.error(error.statusText, error.status);\n      console.log(error);\n    }\n  }\n  handle401Error(error: any){\n    let errorMessage = 'Please login to your account.';\n    this.accountService.logout();\n    this.toastr.error(errorMessage, error.statusText);\n    //route to login page.\n  }\n  handle500Error(error: any){\n    this.toastr.error('Please contact the administrator. An error happened in the server.');\n    console.log(error);\n  }\n  handleUnexpectedError(error: any){\n    this.toastr.error('Something unexpected happened.');\n    console.log(error);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}