{"ast":null,"code":"var _class;\nimport { map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AccountService {\n  constructor(http) {\n    this.http = http;\n    this.currentUserSubject$ = new BehaviorSubject(JSON.parse(localStorage.getItem('SMBlog-currentUser')));\n  }\n  login(model) {\n    return this.http.post(`${environment.webApi}/Account/login`, model).pipe(map(user => {\n      if (user) {\n        localStorage.setItem('blogLab-currentUser', JSON.stringify(user));\n        this.setCurrentUser(user);\n      }\n      return user;\n    }));\n  }\n  register(model) {\n    return this.http.post(`${environment.webApi}/Account/register`, model).pipe(map(user => {\n      if (user) {\n        localStorage.setItem('blogLab-currentUser', JSON.stringify(user));\n        this.setCurrentUser(user);\n      }\n      return user;\n    }));\n  }\n  setCurrentUser(user) {\n    this.currentUserSubject$.next(user);\n  }\n  get currentUserValue() {\n    return this.currentUserSubject$.value;\n  }\n  givenUserIsLoggedIn(username) {\n    return this.isLoggedIn() && this.currentUserValue.userName === username;\n  }\n  isLoggedIn() {\n    const currentUser = this.currentUserValue;\n    const isLoggedIn = !!currentUser && !!currentUser.token;\n    return isLoggedIn;\n  }\n  logout() {\n    localStorage.removeItem('blogLab-currentUser');\n    this.currentUserSubject$.next(null);\n  }\n}\n_class = AccountService;\n_class.ɵfac = function AccountService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,eAAe,QAAoB,MAAM;AAClD,SAASC,WAAW,QAAQ,8BAA8B;;;AAQ1D,OAAM,MAAOC,cAAc;EAIzBC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAEZ,IAAI,CAACC,mBAAmB,GAAG,IAAIL,eAAe,CAAkBM,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;EACvH;EAEAC,KAAK,CAACC,KAA2B;IAC/B,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,GAAGX,WAAW,CAACY,MAAM,gBAAgB,EAAEF,KAAK,CAAC,CAACG,IAAI,CACtEf,GAAG,CAAEgB,IAAsB,IAAI;MAE7B,IAAIA,IAAI,EAAE;QACRP,YAAY,CAACQ,OAAO,CAAC,qBAAqB,EAAEV,IAAI,CAACW,SAAS,CAACF,IAAI,CAAC,CAAC;QACjE,IAAI,CAACG,cAAc,CAACH,IAAI,CAAC;;MAG3B,OAAOA,IAAI;IACb,CAAC,CAAC,CACH;EACH;EAEAI,QAAQ,CAACR,KAA4B;IACnC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,GAAGX,WAAW,CAACY,MAAM,mBAAmB,EAAEF,KAAK,CAAC,CAACG,IAAI,CACzEf,GAAG,CAAEgB,IAAsB,IAAI;MAE7B,IAAIA,IAAI,EAAE;QACRP,YAAY,CAACQ,OAAO,CAAC,qBAAqB,EAAEV,IAAI,CAACW,SAAS,CAACF,IAAI,CAAC,CAAC;QACjE,IAAI,CAACG,cAAc,CAACH,IAAI,CAAC;;MAG3B,OAAOA,IAAI;IACb,CAAC,CAAC,CACH;EACH;EAEAG,cAAc,CAACH,IAAqB;IAClC,IAAI,CAACV,mBAAmB,CAACe,IAAI,CAACL,IAAI,CAAC;EACrC;EAEA,IAAWM,gBAAgB;IACzB,OAAO,IAAI,CAAChB,mBAAmB,CAACiB,KAAK;EACvC;EAEOC,mBAAmB,CAACC,QAAgB;IACzC,OAAO,IAAI,CAACC,UAAU,EAAE,IAAI,IAAI,CAACJ,gBAAgB,CAACK,QAAQ,KAAKF,QAAQ;EACzE;EAEOC,UAAU;IACf,MAAME,WAAW,GAAG,IAAI,CAACN,gBAAgB;IACzC,MAAMI,UAAU,GAAG,CAAC,CAACE,WAAW,IAAI,CAAC,CAACA,WAAW,CAACC,KAAK;IACvD,OAAOH,UAAU;EACnB;EAEAI,MAAM;IACJrB,YAAY,CAACsB,UAAU,CAAC,qBAAqB,CAAC;IAC9C,IAAI,CAACzB,mBAAmB,CAACe,IAAI,CAAC,IAAI,CAAC;EACrC;;SA3DSlB,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAA6B,SAAd7B,MAAc;EAAA8B,YAFb;AAAM","names":["map","BehaviorSubject","environment","AccountService","constructor","http","currentUserSubject$","JSON","parse","localStorage","getItem","login","model","post","webApi","pipe","user","setItem","stringify","setCurrentUser","register","next","currentUserValue","value","givenUserIsLoggedIn","username","isLoggedIn","userName","currentUser","token","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Sameer\\source\\repos\\SMBlog\\SMBlog-UI\\src\\app\\services\\account.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { ApplicationUserCreate } from '../models/account/application-user-create.model';\nimport { ApplicationUserLogin } from '../models/account/application-user-login.model';\nimport { ApplicationUser } from '../models/account/application-user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  private currentUserSubject$: BehaviorSubject<ApplicationUser>\n\n  constructor(\n    private http: HttpClient\n  ) {\n    this.currentUserSubject$ = new BehaviorSubject<ApplicationUser>(JSON.parse(localStorage.getItem('SMBlog-currentUser')));\n    }\n\n    login(model: ApplicationUserLogin) : Observable<ApplicationUser>  {\n      return this.http.post(`${environment.webApi}/Account/login`, model).pipe(\n        map((user : ApplicationUser) => {\n  \n          if (user) {\n            localStorage.setItem('blogLab-currentUser', JSON.stringify(user));\n            this.setCurrentUser(user);\n          }\n  \n          return user;\n        })\n      )\n    }\n  \n    register(model: ApplicationUserCreate) : Observable<ApplicationUser> {\n      return this.http.post(`${environment.webApi}/Account/register`, model).pipe(\n        map((user : ApplicationUser) => {\n  \n          if (user) {\n            localStorage.setItem('blogLab-currentUser', JSON.stringify(user));\n            this.setCurrentUser(user);\n          }\n  \n          return user;\n        })\n      )\n    }\n\n    setCurrentUser(user: ApplicationUser) {\n      this.currentUserSubject$.next(user);\n    }\n  \n    public get currentUserValue(): ApplicationUser {\n      return this.currentUserSubject$.value;\n    }\n  \n    public givenUserIsLoggedIn(username: string) {\n      return this.isLoggedIn() && this.currentUserValue.userName === username;\n    }\n  \n    public isLoggedIn() {\n      const currentUser = this.currentUserValue;\n      const isLoggedIn = !!currentUser && !!currentUser.token;\n      return isLoggedIn;\n    }\n  \n    logout() {\n      localStorage.removeItem('blogLab-currentUser');\n      this.currentUserSubject$.next(null);\n    }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}