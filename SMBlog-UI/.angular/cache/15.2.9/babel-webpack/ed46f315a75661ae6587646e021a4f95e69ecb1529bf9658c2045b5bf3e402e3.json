{"ast":null,"code":"var _class;\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/account.service\";\nexport class JwtInterceptor {\n  constructor(accountService) {\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    const currentUser = this.accountService.currentUserValue;\n    const isLoggedIn = currentUser && currentUser.token;\n    const isApiUrl = request.url.startsWith(environment.webApi);\n    if (isLoggedIn && isApiUrl) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\n_class = JwtInterceptor;\n_class.ɵfac = function JwtInterceptor_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AccountService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"mappings":";AASA,SAASA,WAAW,QAAQ,8BAA8B;;;AAG1D,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAElC;EAEAC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,WAAW,GAAG,IAAI,CAACJ,cAAc,CAACK,gBAAgB;IACxD,MAAMC,UAAU,GAAGF,WAAW,IAAIA,WAAW,CAACG,KAAK;IACnD,MAAMC,QAAQ,GAAGN,OAAO,CAACO,GAAG,CAACC,UAAU,CAACb,WAAW,CAACc,MAAM,CAAC;IAE3D,IAAGL,UAAU,IAAIE,QAAQ,EAAC;MACxBN,OAAO,GAAGA,OAAO,CAACU,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUV,WAAW,CAACG,KAAK;;OAE7C,CAAC;;IAEJ,OAAOJ,IAAI,CAACY,MAAM,CAACb,OAAO,CAAC;EAC7B;;SAnBWJ,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAAkB,SAAdlB,MAAc;AAAA","names":["environment","JwtInterceptor","constructor","accountService","intercept","request","next","currentUser","currentUserValue","isLoggedIn","token","isApiUrl","url","startsWith","webApi","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\Sameer\\source\\repos\\SMBlog\\SMBlog-UI\\src\\app\\interceptors\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AccountService } from '../services/account.service';\nimport { environment } from 'src/environments/environment';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n\n  constructor(private accountService: AccountService) {\n\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const currentUser = this.accountService.currentUserValue;\n    const isLoggedIn = currentUser && currentUser.token;\n    const isApiUrl = request.url.startsWith(environment.webApi);\n\n    if(isLoggedIn && isApiUrl){\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      })\n    }\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}