{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/account.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const currentUser = this.accountService.currentUserValue;\n    const isLoggedIn = currentUser && currentUser.token;\n    if (isLoggedIn) {\n      return true;\n    }\n    this.router.navigate['/'];\n    return false;\n  }\n}\n_class = AuthGuard;\n_class.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YACUC,cAA8B,EAC9BC,MAAc;IADd,mBAAc,GAAdD,cAAc;IACd,WAAM,GAANC,MAAM;EACZ;EACJC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,MAAMC,WAAW,GAAG,IAAI,CAACL,cAAc,CAACM,gBAAgB;IACxD,MAAMC,UAAU,GAAGF,WAAW,IAAIA,WAAW,CAACG,KAAK;IACnD,IAAGD,UAAU,EAAC;MACZ,OAAO,IAAI;;IAEb,IAAI,CAACN,MAAM,CAACQ,QAAQ,CAAC,GAAG,CAAC;IACzB,OAAO,KAAK;EACd;;SAjBWX,SAAS;;mBAATA,MAAS;AAAA;;SAATA,MAAS;EAAAY,SAATZ,MAAS;EAAAa,YAFR;AAAM","names":["AuthGuard","constructor","accountService","router","canActivate","route","state","currentUser","currentUserValue","isLoggedIn","token","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Sameer\\source\\repos\\SMBlog\\SMBlog-UI\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AccountService } from '../services/account.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private accountService: AccountService,\n    private router: Router\n    ){}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot):  boolean {\n    \n    const currentUser = this.accountService.currentUserValue;\n    const isLoggedIn = currentUser && currentUser.token;\n    if(isLoggedIn){\n      return true;\n    }\n    this.router.navigate['/'];\n    return false;\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}