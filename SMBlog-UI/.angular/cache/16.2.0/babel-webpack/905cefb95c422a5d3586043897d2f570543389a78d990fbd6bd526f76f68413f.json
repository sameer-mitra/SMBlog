{"ast":null,"code":"var _class;\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/account.service\";\nexport class JwtInterceptor {\n  constructor(accountService) {\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    const currentUser = this.accountService.currentUserValue;\n    const isApiUrl = request.url.startsWith(environment.webApi);\n    if (this.accountService.isLoggedIn() && isApiUrl) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\n_class = JwtInterceptor;\n_class.ɵfac = function JwtInterceptor_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AccountService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["environment","JwtInterceptor","constructor","accountService","intercept","request","next","currentUser","currentUserValue","isApiUrl","url","startsWith","webApi","isLoggedIn","clone","setHeaders","Authorization","token","handle","i0","ɵɵinject","i1","AccountService","factory","ɵfac"],"sources":["C:\\Users\\Sameer\\source\\repos\\SMBlog\\SMBlog-UI\\src\\app\\interceptors\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AccountService } from '../services/account.service';\nimport { environment } from 'src/environments/environment';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n\n  constructor(\n    private accountService: AccountService\n  ) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const currentUser = this.accountService.currentUserValue;\n    const isApiUrl = request.url.startsWith(environment.webApi);\n    \n    if (this.accountService.isLoggedIn() && isApiUrl) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      })\n    }\n\n    return next.handle(request);\n  }\n}\n"],"mappings":";AASA,SAASA,WAAW,QAAQ,8BAA8B;;;AAG1D,OAAM,MAAOC,cAAc;EAEzBC,YACUC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;EACrB;EAEHC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,WAAW,GAAG,IAAI,CAACJ,cAAc,CAACK,gBAAgB;IACxD,MAAMC,QAAQ,GAAGJ,OAAO,CAACK,GAAG,CAACC,UAAU,CAACX,WAAW,CAACY,MAAM,CAAC;IAE3D,IAAI,IAAI,CAACT,cAAc,CAACU,UAAU,EAAE,IAAIJ,QAAQ,EAAE;MAChDJ,OAAO,GAAGA,OAAO,CAACS,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUT,WAAW,CAACU,KAAK;;OAE7C,CAAC;;IAGJ,OAAOX,IAAI,CAACY,MAAM,CAACb,OAAO,CAAC;EAC7B;;SAnBWJ,cAAc;;mBAAdA,MAAc,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;AAAA;;SAAdrB,MAAc;EAAAsB,OAAA,EAAdtB,MAAc,CAAAuB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}